import React, { RefAttributes, HtmlHTMLAttributes, ReactNode, CSSProperties, FC, ImgHTMLAttributes, MutableRefObject } from 'react';

/** Slider position property. */
type ReactCompareSliderPropPosition = number;
/** Common props shared between components. */
interface ReactCompareSliderCommonProps {
    /** Whether to disable slider movement (items are still interactable). */
    disabled?: boolean;
    /** Whether to use portrait (vertical) orientation. */
    portrait?: boolean;
    /** Divider position. */
    position: ReactCompareSliderPropPosition;
    /**
     * Shorthand CSS `transition` property to apply to handle movement. The specific CSS property
     * to transition **must not** be provided.
     * @example '.5s ease-in-out'
     */
    transition?: string;
}
/** Slider component props *without* ref return props. */
interface ReactCompareSliderRootProps extends Partial<ReactCompareSliderCommonProps> {
    /** Padding in pixels to limit the slideable bounds on the X-axis (landscape) or Y-axis (portrait). */
    boundsPadding?: number;
    /** Whether the slider should follow the pointer on hover. */
    changePositionOnHover?: boolean;
    /** Custom handle component. */
    handle?: ReactNode;
    /** First item to show. */
    itemOne: ReactNode;
    /** Second item to show. */
    itemTwo: ReactNode;
    /** Percentage or pixel amount to move when the slider handle is focused and keyboard arrow is pressed. */
    keyboardIncrement?: number | `${number}%`;
    /** Whether to only change position when handle is interacted with (useful for touch devices). */
    onlyHandleDraggable?: boolean;
    /** Callback on position change with position as percentage. */
    onPositionChange?: (position: ReactCompareSliderPropPosition) => void;
}
/** Properties returned by the `useReactCompareSliderRef` hook. */
type UseReactCompareSliderRefReturn = {
    /**
     * DOM node of the root container of the slider.
     * @NOTE This value is only populated **after** the component has mounted.
     */
    rootContainer: HTMLDivElement | null;
    /**
     * Set the position of the slider as a percentage between `0` and `100`.
     * Updates the slider position after render without triggering re-renders.
     * @NOTE This function is only actionable **after** the component has mounted.
     */
    setPosition: (position: ReactCompareSliderPropPosition) => void;
};
/** Slider component props *with* ref return props. */
type ReactCompareSliderProps = ReactCompareSliderRootProps & RefAttributes<UseReactCompareSliderRefReturn>;
/** `ReactCompareSliderProps` and all valid `div` element props. */
type ReactCompareSliderDetailedProps = ReactCompareSliderProps & HtmlHTMLAttributes<HTMLDivElement>;

/** Root Comparison slider. */
declare const ReactCompareSlider: React.ForwardRefExoticComponent<Omit<ReactCompareSliderDetailedProps, "ref"> & React.RefAttributes<UseReactCompareSliderRefReturn>>;

/** Props for `ReactCompareSliderHandle`. */
interface ReactCompareSliderHandleProps extends Pick<ReactCompareSliderCommonProps, 'disabled' | 'portrait'> {
    /** Optional styles for handle the button. */
    buttonStyle?: CSSProperties;
    /** Optional styles for lines either side of the handle button. */
    linesStyle?: CSSProperties;
    /** Optional styles for the handle root. */
    style?: CSSProperties;
}
/** Default `handle`. */
declare const ReactCompareSliderHandle: FC<ReactCompareSliderHandleProps & HtmlHTMLAttributes<HTMLDivElement>>;

/** Props for `ReactCompareSliderImage`. */
type ReactCompareSliderImageProps = ImgHTMLAttributes<HTMLImageElement>;
/** `Img` element with defaults from `styleFitContainer` applied. */
declare const ReactCompareSliderImage: FC<ReactCompareSliderImageProps>;

/**
 * Stand-alone CSS utility to make replaced elements (`img`, `video`, etc.) fit their container.
 */
declare const styleFitContainer: ({ boxSizing, objectFit, objectPosition, ...props }?: CSSProperties) => CSSProperties;

/**
 * Control the position and access or modify the DOM elements of the slider.
 */
declare const useReactCompareSliderRef: () => MutableRefObject<UseReactCompareSliderRefReturn>;

export { ReactCompareSlider, ReactCompareSliderDetailedProps, ReactCompareSliderHandle, ReactCompareSliderHandleProps, ReactCompareSliderImage, ReactCompareSliderImageProps, ReactCompareSliderPropPosition, ReactCompareSliderProps, UseReactCompareSliderRefReturn, styleFitContainer, useReactCompareSliderRef };
